class Data():
    def __init__(self):
        self.nums = [1, 2, 3, 4, 5]

    def change_data(self, index, n):
        self.nums[index] = n

data_one = Data()
data_one.nums[0] = 100
print(data_one.nums)
data_two = Data()
data_two.change_data(0, 100)
print(data_two.nums)


#private variables

class PublicPrivateExample():
    def __init__(self):
        self.public = "safe"
        self._unsafe = "unsafe"

    def public_method(self):
        #clients can use this
        pass

    def _unsafe_method(self):
        #clients shouldnt use this (but can)
        pass
#abstraction, the art of ommiting unneccessary variables when creating a class
#e.g. if i modeled a person and left out hair colour & skin toneself.
#polymorphism - to present the same interface for different forms (data types)
#e.g print can be used to print("hello") print("200") or print(200.1)

#modelling shapes with inheritence
class Shape():
    def __init__(self, w, l):
        self.width = w
        self.len = l

    def print_size(self):
        print("{} by {}".format(self.width, self.len))

class Square(Shape):
    def area(self):
        return self.width * self.len

    def print_size(self):
        print("I am {} by {}".format(self.width, self.len))

a_square = Square(20, 20)
a_square.print_size()
print(a_square.area())
